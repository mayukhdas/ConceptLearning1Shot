% Running on host: DESKTOP-K98RL7C

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[.\Toy-Cancer\train/train_pos.txt, .\Toy-Cancer\train/train_neg.txt, .\Toy-Cancer\train/train_bk.txt, .\Toy-Cancer\train/train_facts.txt]
%  for N=0: args[N]=.\Toy-Cancer\train/train_pos.txt

% getInputArgWithDefaultValue: args=[.\Toy-Cancer\train/train_pos.txt, .\Toy-Cancer\train/train_neg.txt, .\Toy-Cancer\train/train_bk.txt, .\Toy-Cancer\train/train_facts.txt]
%  for N=1: args[N]=.\Toy-Cancer\train/train_neg.txt

% getInputArgWithDefaultValue: args=[.\Toy-Cancer\train/train_pos.txt, .\Toy-Cancer\train/train_neg.txt, .\Toy-Cancer\train/train_bk.txt, .\Toy-Cancer\train/train_facts.txt]
%  for N=2: args[N]=.\Toy-Cancer\train/train_bk.txt

% getInputArgWithDefaultValue: args=[.\Toy-Cancer\train/train_pos.txt, .\Toy-Cancer\train/train_neg.txt, .\Toy-Cancer\train/train_bk.txt, .\Toy-Cancer\train/train_facts.txt]
%  for N=3: args[N]=.\Toy-Cancer\train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../toy_cancer_bk.txt'.

% Switching to VarIndicator = uppercase.

% Switching to standard-logic notation for variables; previous setting = uppercase

% Switching to VarIndicator = lowercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = lowercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = lowercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 15 facts.
% Have read 4 examples from '.\Toy-Cancer\train' [.\Toy-Cancer\train/train*].
% Have read 0 examples from '.\Toy-Cancer\train' [.\Toy-Cancer\train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 cancer(a)
%  targetPred:                cancer/1
%  targetArgTypes:            signature = [Const], types = [+Person]
%  targets:                   [cancer(a)]
%  targetPredicates:          [cancer/1]
%  targetArgSpecs:            [[a[+Person]]]
%  variablesInTargets:        [[a]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 2 milliseconds
% Time to collect examples: 0 seconds

% Read 4 pos examples and 0 neg examples.
% Time to init learnOneClause: 11 milliseconds
% Old dir./Toy-Cancer/model/

% Have 4 'raw' positive examples and kept 4.
% Have 0 'raw' negative examples and kept 0.
% No neg ex for cancer

% processing backup's for cancer
%  POS EX = 4
%  NEG EX = 0

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
./Toy-Cancer/model/
File: .\Toy-Cancer\train/advice.txt doesnt exist.Hence no advice loaded
% Learning 5 trees in this iteration for cancer

% Learn model for: cancer
% Kept 4 of the 4 positive examples.
% Kept 0 of the 0 negative examples.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0
Set score:0.0
% Dataset size: 4
Computing probabilities
prob time:1 milliseconds
No hidden examples for : cancer
Time to build dataset: 3 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0
Set score:0.0
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

***** Warning: % Have only 4 positive examples, so cannot choose 10 of them. *****


% Have these 4 positive seeds: 0 1 2 3
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% LearnOneClause Parameters:
%   Targets (1):
%    cancer(+Person)
%  Modes (40):
%    friends(+Person, -Person),
%    friends(-Person, +Person),
%    smokes(+Person),
%    num_of_smoking_friends(+Person, #Number),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber)

% target           = cancer(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
% Most-general root: cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
% [ LazyGroundClauseIndex ]  Building full index for friends/2 with 12 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for friends/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for friends/2.
% [ LazyGroundClauseIndex ]  Building full index for smokes/1 with 3 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for num_of_smoking_friends/2.
% [ LazyGroundClauseIndex ]  Building full index for num_of_smoking_friends/2 with 1 assertions.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0100000000000003E-6) for clause:  smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=0:1] 'friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 1.  Pruned 3 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(a, _) ^ friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  friends(a, b) ^ friends(b, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(a, b) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(a, _) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(a, b) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  friends(a, _) ^ smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  friends(a, b) ^ smokes(b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(a, _) ^ num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(a, _) ^ num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(a, b) ^ num_of_smoking_friends(b, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(a, b) ^ num_of_smoking_friends(b, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=0:1] 'friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 3 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(b, a) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(_, a) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(b, a) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  friends(_, a) ^ smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  friends(b, a) ^ smokes(b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(_, a) ^ num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(_, a) ^ num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(b, a) ^ num_of_smoking_friends(b, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(b, a) ^ num_of_smoking_friends(b, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1:2] 'friends(a, _) ^ friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#5 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(b, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#6 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#7 of outerLoop #1, bodyLen=1:2] 'friends(a, _) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#8 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#9 of outerLoop #1, bodyLen=1:2] 'friends(b, a) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

***** Warning: #1 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 20:36:05 5/3/18.  [Using 2,349,648 memory cells.]  %%%%%


% FOR cancer(a):
%   return 0;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */


% Clauses:

cancer(a, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0). // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: ./Toy-Cancer/model/bRDNs/cancer.model.ckpt
% Time taken to learn 1 trees is 246 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0
Set score:0.0
% Only 4 out of 4 converged.
% Kept 4 of the 4 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 4
Computing probabilities
prob time:0 seconds
No hidden examples for : cancer
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0
Set score:0.0
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 4 positive seeds: 0 1 2 3
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = cancer(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
% Most-general root: cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0100000000000003E-6) for clause:  smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=0:1] 'friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 1.  Pruned 3 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(a, _) ^ friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  friends(a, b) ^ friends(b, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(a, b) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(a, _) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(a, b) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  friends(a, _) ^ smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  friends(a, b) ^ smokes(b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(a, _) ^ num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(a, _) ^ num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(a, b) ^ num_of_smoking_friends(b, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(a, b) ^ num_of_smoking_friends(b, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=0:1] 'friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 3 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(b, a) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(_, a) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(b, a) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  friends(_, a) ^ smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  friends(b, a) ^ smokes(b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(_, a) ^ num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(_, a) ^ num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(b, a) ^ num_of_smoking_friends(b, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(b, a) ^ num_of_smoking_friends(b, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1:2] 'friends(a, _) ^ friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#5 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(b, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#6 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#7 of outerLoop #1, bodyLen=1:2] 'friends(a, _) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#8 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#9 of outerLoop #1, bodyLen=1:2] 'friends(b, a) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

***** Warning: #2 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 20:36:06 5/3/18.  [Using 2,383,736 memory cells.]  %%%%%


% FOR cancer(a):
%   return 0;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */


% Clauses:

cancer(a, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0). // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: ./Toy-Cancer/model/bRDNs/cancer.model.ckpt
% Time taken to learn 2 trees is 342 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0
Set score:0.0
% Only 4 out of 4 converged.
% Kept 4 of the 4 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 4
Computing probabilities
prob time:0 seconds
No hidden examples for : cancer
Time to build dataset: 0 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0
Set score:0.0
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 4 positive seeds: 0 1 2 3
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = cancer(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
% Most-general root: cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0100000000000003E-6) for clause:  smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=0:1] 'friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 1.  Pruned 3 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(a, _) ^ friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  friends(a, b) ^ friends(b, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(a, b) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(a, _) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(a, b) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  friends(a, _) ^ smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  friends(a, b) ^ smokes(b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(a, _) ^ num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(a, _) ^ num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(a, b) ^ num_of_smoking_friends(b, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(a, b) ^ num_of_smoking_friends(b, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=0:1] 'friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 3 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(b, a) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(_, a) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(b, a) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  friends(_, a) ^ smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  friends(b, a) ^ smokes(b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(_, a) ^ num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(_, a) ^ num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(b, a) ^ num_of_smoking_friends(b, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(b, a) ^ num_of_smoking_friends(b, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1:2] 'friends(a, _) ^ friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#5 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(b, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#6 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#7 of outerLoop #1, bodyLen=1:2] 'friends(a, _) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#8 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#9 of outerLoop #1, bodyLen=1:2] 'friends(b, a) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

***** Warning: #3 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #3 @ 20:36:06 5/3/18.  [Using 2,388,120 memory cells.]  %%%%%


% FOR cancer(a):
%   return 0;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */


% Clauses:

cancer(a, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0). // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: ./Toy-Cancer/model/bRDNs/cancer.model.ckpt
% Time taken to learn 3 trees is 447 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0
Set score:0.0
% Only 4 out of 4 converged.
% Kept 4 of the 4 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 4
Computing probabilities
prob time:0 seconds
No hidden examples for : cancer
Time to build dataset: 9 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0
Set score:0.0
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 4 positive seeds: 0 1 2 3
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = cancer(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
% Most-general root: cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0100000000000003E-6) for clause:  smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=0:1] 'friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 1.  Pruned 3 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(a, _) ^ friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  friends(a, b) ^ friends(b, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(a, b) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(a, _) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(a, b) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  friends(a, _) ^ smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  friends(a, b) ^ smokes(b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(a, _) ^ num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(a, _) ^ num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(a, b) ^ num_of_smoking_friends(b, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(a, b) ^ num_of_smoking_friends(b, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=0:1] 'friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 3 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(b, a) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(_, a) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(b, a) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  friends(_, a) ^ smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  friends(b, a) ^ smokes(b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(_, a) ^ num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(_, a) ^ num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(b, a) ^ num_of_smoking_friends(b, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(b, a) ^ num_of_smoking_friends(b, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1:2] 'friends(a, _) ^ friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#5 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(b, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#6 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#7 of outerLoop #1, bodyLen=1:2] 'friends(a, _) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#8 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#9 of outerLoop #1, bodyLen=1:2] 'friends(b, a) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

***** Warning: #4 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #4 @ 20:36:06 5/3/18.  [Using 2,389,320 memory cells.]  %%%%%


% FOR cancer(a):
%   return 0;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */


% Clauses:

cancer(a, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0). // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: ./Toy-Cancer/model/bRDNs/cancer.model.ckpt
% Time taken to learn 4 trees is 527 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0
Set score:0.0
% Only 4 out of 4 converged.
% Kept 4 of the 4 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 4
Computing probabilities
prob time:0 seconds
No hidden examples for : cancer
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0
Set score:0.0
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 4 positive seeds: 0 1 2 3
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = cancer(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
% Most-general root: cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'cancer(_).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0100000000000003E-6) for clause:  smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=0:1] 'friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 1.  Pruned 3 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(a, _) ^ friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  friends(a, b) ^ friends(b, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(a, b) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(a, _) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(a, b) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  friends(a, _) ^ smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  friends(a, b) ^ smokes(b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(a, _) ^ num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(a, _) ^ num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(a, b) ^ num_of_smoking_friends(b, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(a, b) ^ num_of_smoking_friends(b, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=0:1] 'friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 3 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(b, a) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(_, a) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(b, a) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  friends(_, a) ^ smokes(a) => cancer(a).  [covers 3.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  friends(b, a) ^ smokes(b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(_, a) ^ num_of_smoking_friends(a, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000007E-6) for clause:  friends(_, a) ^ num_of_smoking_friends(a, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(b, a) ^ num_of_smoking_friends(b, 2) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0400000000000004E-6) for clause:  friends(b, a) ^ num_of_smoking_friends(b, 1) => cancer(a).  [covers 2.0/4.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1:2] 'friends(a, _) ^ friends(a, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#5 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(b, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#6 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#7 of outerLoop #1, bodyLen=1:2] 'friends(a, _) ^ friends(_, a) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#8 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(_, b) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#9 of outerLoop #1, bodyLen=1:2] 'friends(b, a) ^ friends(b, _) => cancer(a).  [covers 4.0/4.0 pos, 0.0/0.0 neg]' score=-Infinity

***** Warning: #5 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #5 @ 20:36:06 5/3/18.  [Using 2,392,280 memory cells.]  %%%%%


% FOR cancer(a):
%   return 0;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */


% Clauses:

cancer(a, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   cancer(Underscore, 0). // Flattened version of clause #1.


% The unique flattened literals:

% Saving model in: ./Toy-Cancer/model/bRDNs/cancer.model.ckpt


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for cancer.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).

logPrior(-1.8).
cancer(a, total) :- // A general accessor. 
   cancer(a, 1000000, total), !.
cancer(a, total) :- waitHere("This should not fail", cancer(a, total)).

cancer(a, treesToUse, total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(logPrior),
   getScore_cancer_tree1(a, treesToUse, total1),
   getScore_cancer_tree2(a, treesToUse, total2),
   getScore_cancer_tree3(a, treesToUse, total3),
   getScore_cancer_tree4(a, treesToUse, total4),
   getScore_cancer_tree5(a, treesToUse, total5),
   total is logPrior + total1 + total2 + total3 + total4 + total5,
   !.
cancer(a, treesToUse, total) :- waitHere("This should not fail", cancer(a, treesToUse, total)).

getScore_cancer_tree1(a, treesToUse, 0.0) :- 1 > treesToUse, !.
getScore_cancer_tree1(a, treesToUse, total1) :- cancer_tree1(a, total), stepLength_tree1(stepLen), total1 is total * stepLen.

getScore_cancer_tree2(a, treesToUse, 0.0) :- 2 > treesToUse, !.
getScore_cancer_tree2(a, treesToUse, total2) :- cancer_tree2(a, total), stepLength_tree2(stepLen), total2 is total * stepLen.

getScore_cancer_tree3(a, treesToUse, 0.0) :- 3 > treesToUse, !.
getScore_cancer_tree3(a, treesToUse, total3) :- cancer_tree3(a, total), stepLength_tree3(stepLen), total3 is total * stepLen.

getScore_cancer_tree4(a, treesToUse, 0.0) :- 4 > treesToUse, !.
getScore_cancer_tree4(a, treesToUse, total4) :- cancer_tree4(a, total), stepLength_tree4(stepLen), total4 is total * stepLen.

getScore_cancer_tree5(a, treesToUse, 0.0) :- 5 > treesToUse, !.
getScore_cancer_tree5(a, treesToUse, total5) :- cancer_tree5(a, total), stepLength_tree5(stepLen), total5 is total * stepLen.

flattenedLiteralsInThisSetOfTrees(0, []).
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0
Set score:0.0
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 4 positive seeds: 1 4 7 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = cancer(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  cancer(_).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
% Most-general root: cancer(_).  [covers 20.0/20.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'cancer(_).  [covers 20.0/20.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  friends(a, _) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  friends(_, a) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000001 (regressionFit = -1.70530e-13, penalties=1.0100000000000003E-6) for clause:  smokes(a) => cancer(a).  [covers 15.0/20.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000001): smokes(a) => cancer(a).  [covers 15.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000001 (regressionFit = -1.13687e-13, penalties=1.03E-6) for clause:  num_of_smoking_friends(a, 2) => cancer(a).  [covers 10.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000001 (regressionFit = -1.13687e-13, penalties=1.03E-6) for clause:  num_of_smoking_friends(a, 1) => cancer(a).  [covers 10.0/20.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=0:1] 'friends(a, _) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 1.  Pruned 3 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(a, _) ^ friends(a, _) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.9200000000000003E-6) for clause:  friends(a, b) ^ friends(b, a) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(a, b) ^ friends(b, _) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(a, _) ^ friends(_, a) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(a, b) ^ friends(_, b) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -1.70530e-13, penalties=2.1200000000000005E-6) for clause:  friends(a, _) ^ smokes(a) => cancer(a).  [covers 15.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  friends(a, b) ^ smokes(b) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -1.13687e-13, penalties=2.1400000000000007E-6) for clause:  friends(a, _) ^ num_of_smoking_friends(a, 2) => cancer(a).  [covers 10.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -1.13687e-13, penalties=2.1400000000000007E-6) for clause:  friends(a, _) ^ num_of_smoking_friends(a, 1) => cancer(a).  [covers 10.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -1.13687e-13, penalties=2.0400000000000004E-6) for clause:  friends(a, b) ^ num_of_smoking_friends(b, 1) => cancer(a).  [covers 10.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -1.13687e-13, penalties=2.0400000000000004E-6) for clause:  friends(a, b) ^ num_of_smoking_friends(b, 2) => cancer(a).  [covers 10.0/20.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=0:1] 'friends(_, a) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 3 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(_, a) ^ friends(a, _) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(b, a) ^ friends(b, _) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  friends(_, a) ^ friends(_, a) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  friends(b, a) ^ friends(_, b) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -1.70530e-13, penalties=2.1200000000000005E-6) for clause:  friends(_, a) ^ smokes(a) => cancer(a).  [covers 15.0/20.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  friends(b, a) ^ smokes(b) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -1.13687e-13, penalties=2.1400000000000007E-6) for clause:  friends(_, a) ^ num_of_smoking_friends(a, 2) => cancer(a).  [covers 10.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -1.13687e-13, penalties=2.1400000000000007E-6) for clause:  friends(_, a) ^ num_of_smoking_friends(a, 1) => cancer(a).  [covers 10.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -1.13687e-13, penalties=2.0400000000000004E-6) for clause:  friends(b, a) ^ num_of_smoking_friends(b, 1) => cancer(a).  [covers 10.0/20.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -1.13687e-13, penalties=2.0400000000000004E-6) for clause:  friends(b, a) ^ num_of_smoking_friends(b, 2) => cancer(a).  [covers 10.0/20.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1:2] 'friends(a, _) ^ friends(a, _) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#5 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(b, a) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#6 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(b, _) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#7 of outerLoop #1, bodyLen=1:2] 'friends(a, _) ^ friends(_, a) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#8 of outerLoop #1, bodyLen=1:2] 'friends(a, b) ^ friends(_, b) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]' score=-Infinity

% Consider expanding [#9 of outerLoop #1, bodyLen=1:2] 'friends(_, a) ^ friends(a, _) => cancer(a).  [covers 20.0/20.0 pos, 0.0/0.0 neg]' score=-Infinity

***** Warning: #6 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: smokes(a) => cancer(a).  [covers 15.0/20.0 pos, 0.0/0.0 neg]

% The best node found: smokes(a) => cancer(a).  [covers 15.0/20.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: smokes(a) => cancer(a).  [covers 15.0/20.0 pos, 0.0/0.0 neg]
Comparing variance: -1.1368683772161604E-14 to score=0.0 #egs=15.0
Comparing variance: 0.0 to score=0.0 #egs=5.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 66 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #1, the best clause found is:
%      smokes(a) => cancer(a).  [covers 15.0/20.0 pos, 0.0/0.0 neg]
% This clause covers 15 positive examples, of which 15 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree Combined @ 20:36:06 5/3/18.  [Using 2,400,112 memory cells.]  %%%%%


% FOR cancer(a):
%   if ( smokes(a) )
%   then return 4.290744675497562;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return 4.290744675497561;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */


% Clauses:

cancer(a, 4.290744675497562) :- 
     smokes(a), 
     !. // Clause #1.

cancer(a, 4.290744675497561) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_smokes(A) ^
   ! => 
   cancer(A, 4.290744675497562). // Flattened version of clause #1.

flattened_! => 
   cancer(Underscore, 4.290744675497561). // Flattened version of clause #2.


% The unique flattened literals:
%   smokes(A)

% Time taken to learn model for 'cancer': 695 milliseconds.
% Saving model in: ./Toy-Cancer/model/bRDNs/cancer.model
cached groundings hit: 0
Misses: 0

% Total learning time (5 trees): 1.010 seconds.

% Starting an INFERENCE run of bRDN.


// Closed by a createDribble call with file = ./Toy-Cancer/model/test_learnPlusInfer_dribble.txt
