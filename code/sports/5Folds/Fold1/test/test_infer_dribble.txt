% Running on host: BL-SOIC-30ZND42

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[.\sports\5Folds\Fold1\test/test_pos.txt, .\sports\5Folds\Fold1\test/test_neg.txt, .\sports\5Folds\Fold1\test/test_bk.txt, .\sports\5Folds\Fold1\test/test_facts.txt]
%  for N=0: args[N]=.\sports\5Folds\Fold1\test/test_pos.txt

% getInputArgWithDefaultValue: args=[.\sports\5Folds\Fold1\test/test_pos.txt, .\sports\5Folds\Fold1\test/test_neg.txt, .\sports\5Folds\Fold1\test/test_bk.txt, .\sports\5Folds\Fold1\test/test_facts.txt]
%  for N=1: args[N]=.\sports\5Folds\Fold1\test/test_neg.txt

% getInputArgWithDefaultValue: args=[.\sports\5Folds\Fold1\test/test_pos.txt, .\sports\5Folds\Fold1\test/test_neg.txt, .\sports\5Folds\Fold1\test/test_bk.txt, .\sports\5Folds\Fold1\test/test_facts.txt]
%  for N=2: args[N]=.\sports\5Folds\Fold1\test/test_bk.txt

% getInputArgWithDefaultValue: args=[.\sports\5Folds\Fold1\test/test_pos.txt, .\sports\5Folds\Fold1\test/test_neg.txt, .\sports\5Folds\Fold1\test/test_bk.txt, .\sports\5Folds\Fold1\test/test_facts.txt]
%  for N=3: args[N]=.\sports\5Folds\Fold1\test/test_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../sports_bk.txt'.

% Switching to VarIndicator = uppercase.

% Switching to standard-logic notation for variables; previous setting = uppercase

% Switching to VarIndicator = lowercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = lowercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = lowercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 7,824 facts.
% Have read 100 examples from '.\sports\5Folds\Fold1\test' [.\sports\5Folds\Fold1\test/test*].
% Have read 200 examples from '.\sports\5Folds\Fold1\test' [.\sports\5Folds\Fold1\test/test*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 teamplayssport(a, b)
%  targetPred:                teamplayssport/2
%  targetArgTypes:            signature = [Const, Const], types = [+team, +sport]
%  targets:                   [teamplayssport(a, b)]
%  targetPredicates:          [teamplayssport/2]
%  targetArgSpecs:            [[a[+team], b[+sport]]]
%  variablesInTargets:        [[a, b]]

% Started collecting constants

% Collecting the types of constants.

%   *** WARNING ***  Constant '"cleveland_indians"' is already marked as being of types = [team];
%          type = 'athlete' may be added if not already known.
%  PredicateName = 'athleteplayssport', from 'athleteplayssport("cleveland_indians", "baseball")',
%  which has types = [signature = [Const, Const], types = [+athlete, +sport], signature = [Const, Const], types = [-athlete, +sport], signature = [Const, Const], types = [+athlete, -sport]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 88 milliseconds
% Time to collect examples: 0 seconds

% Read 100 pos examples and 200 neg examples.
% Time to init learnOneClause: 94 milliseconds
% Old dir./sports/5Folds/Fold1/models/

% Have 100 'raw' positive examples and kept 100.
% Have 200 'raw' negative examples and kept 200.

% processing backup's for teamplayssport
%  POS EX = 100
%  NEG EX = 200

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
% Did not learn a model for 'teamplayssport' this run.
%   loadModel (#0): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree0.tree
%   loadModel (#1): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree1.tree
%   loadModel (#2): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree2.tree
%   loadModel (#3): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree3.tree
%   loadModel (#4): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree4.tree
%   loadModel (#5): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree5.tree
%   loadModel (#6): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree6.tree
%   loadModel (#7): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree7.tree
%   loadModel (#8): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree8.tree
%   loadModel (#9): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree9.tree
%   loadModel (#10): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree10.tree
%   loadModel (#11): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree11.tree
%   loadModel (#12): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree12.tree
%   loadModel (#13): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree13.tree
%   loadModel (#14): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree14.tree
%   loadModel (#15): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree15.tree
%   loadModel (#16): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree16.tree
%   loadModel (#17): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree17.tree
%   loadModel (#18): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree18.tree
%   loadModel (#19): ./sports/5Folds/Fold1/models/bRDNs/Trees/teamplayssportTree19.tree
%  Done loading 20 models.
File: .\sports\5Folds\Fold1\test/advice.txt doesnt exist.Hence no advice loaded

% for teamplayssport |lookupPos| = 100
% for teamplayssport |lookupNeg| = 200
% getJointExamples: |pos| = 100, |neg| = 200

% Starting inference in bRDN.

% Subsampling the negative examples.
% Trees = 20
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for plays/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for teamplaysagainstteam/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for teamplaysinleague/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for teamplaysagainstteam/2.
% [ LazyGroundClauseIndex ]  Building full index for teamplaysagainstteam/2 with 3,185 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for athleteplaysforteam/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for plays/2.
% [ LazyGroundClauseIndex ]  Building full index for teamplaysinleague/2 with 1,227 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for athleteplayssport/2.
% [ LazyGroundClauseIndex ]  Building full index for athleteplayssport/2 with 2,050 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for athleteplayssport/2.
% [ LazyGroundClauseIndex ]  Building full index for plays/2 with 62 assertions.
% F1 = 1.0
% Threshold = 0.5060160069699504
 (Arithmetic) Mean Probability Assigned to Correct Output Class: 212.119/300.00 = 0.707064

 The weighted count of positive examples = 100.000 and the weighted count of negative examples = 200.000

printExamples: Writing out predictions (for Tuffy?) on 300 examples for 'teamplayssport' to:
  .\sports\5Folds\Fold1\test/results_teamplayssport.db
 and to:
  .\sports\5Folds\Fold1\test/query_teamplayssport.db
%    No need to compress since small: .\sports\5Folds\Fold1\test/query_teamplayssport.db

% Computing Area Under Curves.
%Pos=100
%Neg=200
%LL:-81.84967392535808
%LL:-384.6547566955646

% Running command: java -jar .//auc.jar .\sports\5Folds\Fold1\test/AUC/aucTemp.txt list 0.0
% WAITING FOR command: java -jar .//auc.jar .\sports\5Folds\Fold1\test/AUC/aucTemp.txt list 0.0
% DONE WAITING FOR command: java -jar .//auc.jar .\sports\5Folds\Fold1\test/AUC/aucTemp.txt list 0.0

%   AUC ROC   = 0.769875
%   AUC PR    = 0.661317
%   CLL	      = -1.282183
%   Precision = 0.596774 at threshold = 0.506
%   Recall    = 0.740000
%   F1        = 0.660714

% Total inference time (20 trees): 2.103 seconds.
