% Running on host: DESKTOP-K98RL7C

% Creating string handler #1.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% getInputArgWithDefaultValue: args=[.\Blocks\train/train_pos.txt, .\Blocks\train/train_neg.txt, .\Blocks\train/train_bk.txt, .\Blocks\train/train_facts.txt]
%  for N=0: args[N]=.\Blocks\train/train_pos.txt

% getInputArgWithDefaultValue: args=[.\Blocks\train/train_pos.txt, .\Blocks\train/train_neg.txt, .\Blocks\train/train_bk.txt, .\Blocks\train/train_facts.txt]
%  for N=1: args[N]=.\Blocks\train/train_neg.txt

% getInputArgWithDefaultValue: args=[.\Blocks\train/train_pos.txt, .\Blocks\train/train_neg.txt, .\Blocks\train/train_bk.txt, .\Blocks\train/train_facts.txt]
%  for N=2: args[N]=.\Blocks\train/train_bk.txt

% getInputArgWithDefaultValue: args=[.\Blocks\train/train_pos.txt, .\Blocks\train/train_neg.txt, .\Blocks\train/train_bk.txt, .\Blocks\train/train_facts.txt]
%  for N=3: args[N]=.\Blocks\train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../blocks_bk.txt'.

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% LoadAllModes() called.  Currently loaded modes: []
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_listsInLogic, modes_differentInLogic, comparisonInLogic, bootstrapBKinLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, inlines_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 17 facts.
% Have read 1 examples from '.\Blocks\train' [.\Blocks\train/train*].
% Have read 3 examples from '.\Blocks\train' [.\Blocks\train/train*].

%  LearnOneClause initialized.

***** Warning: % Should not set minPosCoverage (2.0) to more than the total weight on the positive examples (1.0).  Will use the maximum possible value. *****

% Reading background theory from dir: .\Blocks\train
% Have read the relevance files.


% NEW target:                 Ell(D)
%  targetPred:                Ell/1
%  targetArgTypes:            signature = [const], types = [+Shape]
%  targets:                   [Ell(D)]
%  targetPredicates:          [Ell/1]
%  targetArgSpecs:            [[D[+Shape]]]
%  variablesInTargets:        [[D]]

% Started collecting constants

% Collecting the types of constants.

%   *** WARNING ***  Constant 'e' is already marked as being of types = [part2];
%          type = 'Shape' may be added if not already known.
%  PredicateName = 'Height', from 'Height(e, 4)',
%  which has types = [signature = [const, const], types = [+Shape, #Float]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

%   *** WARNING ***  Constant 'e' is already marked as being of types = [part2, Shape];
%          type = 'part1' may be added if not already known.
%  PredicateName = 'Contains', from 'Contains(p, e, d)',
%  which has types = [signature = [const, const, const], types = [+Shape, -part1, -part2]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 4 milliseconds
% Time to collect examples: 0 seconds

% Read 1 pos examples and 3 neg examples.
% Time to init learnOneClause: 9 milliseconds

% Initializing fold 0.
%   Number of positive TRAIN examples = 1.
%   Number of negative TRAIN examples = 3.
%   Number of positive EVAL  examples = 0.
%   Number of negative EVAL  examples = 0.
% [AdviceProcessor]  Generated 6 clause(s) at relevance level STRONGLY_IRRELEVANT:
% [AdviceProcessor]   mega_posAnd_notNegOr0(A) :- 
% [AdviceProcessor]             Column(B), 
% [AdviceProcessor]             Row(C), 
% [AdviceProcessor]             Length(C, D), 
% [AdviceProcessor]             H(B, E), 
% [AdviceProcessor]             Height(A, F), 
% [AdviceProcessor]             Base(A, D), 
% [AdviceProcessor]             Contains(A, C, B)  POSSIBLE_ANSWER
% [AdviceProcessor]   mega_notPosAnd_negAnd1(A) :- 
% [AdviceProcessor]             \+(Column(B), 
% [AdviceProcessor]                Row(C), 
% [AdviceProcessor]                Length(C, D), 
% [AdviceProcessor]                H(B, E), 
% [AdviceProcessor]                Height(A, F), 
% [AdviceProcessor]                Base(A, D), 
% [AdviceProcessor]                Contains(A, C, B)
% [AdviceProcessor]               )  POSSIBLE_ANSWER
% [AdviceProcessor]   single_example_advice4(A) :- 
% [AdviceProcessor]             Column(B), 
% [AdviceProcessor]             Row(C), 
% [AdviceProcessor]             Length(C, D), 
% [AdviceProcessor]             H(B, E), 
% [AdviceProcessor]             Height(A, F), 
% [AdviceProcessor]             Base(A, D), 
% [AdviceProcessor]             Contains(A, C, B)  VERY_STRONGLY_RELEVANT
% [AdviceProcessor]   not_single_example_advice4(A) :- 
% [AdviceProcessor]             \+(Column(B), 
% [AdviceProcessor]                Row(C), 
% [AdviceProcessor]                Length(C, D), 
% [AdviceProcessor]                H(B, E), 
% [AdviceProcessor]                Height(A, F), 
% [AdviceProcessor]                Base(A, D), 
% [AdviceProcessor]                Contains(A, C, B)
% [AdviceProcessor]               )  VERY_STRONGLY_RELEVANT_NEG
% [AdviceProcessor]   single_piece_advice5(A) :- 
% [AdviceProcessor]             Column(B), 
% [AdviceProcessor]             Row(C), 
% [AdviceProcessor]             Length(C, D), 
% [AdviceProcessor]             H(B, E), 
% [AdviceProcessor]             Height(A, F), 
% [AdviceProcessor]             Base(A, D), 
% [AdviceProcessor]             Contains(A, C, B)  STRONGLY_RELEVANT
% [AdviceProcessor]   not_single_piece_advice5(A) :- 
% [AdviceProcessor]             \+(Column(B), 
% [AdviceProcessor]                Row(C), 
% [AdviceProcessor]                Length(C, D), 
% [AdviceProcessor]                H(B, E), 
% [AdviceProcessor]                Height(A, F), 
% [AdviceProcessor]                Base(A, D), 
% [AdviceProcessor]                Contains(A, C, B)
% [AdviceProcessor]               )  STRONGLY_RELEVANT_NEG

% WARNING #1: Duplicate cost of 'single_piece_advice5/1'.  Had previously said cost = 0.10001 and now saying cost = 0.1.
% Will use this latest setting.

% WARNING #2: Duplicate cost of 'mega_notPosAnd_negAnd1/1'.  Had previously said cost = 0.00101 and now saying cost = 0.001.
% Will use this latest setting.

% WARNING #3: Duplicate cost of 'not_single_example_advice4/1'.  Had previously said cost = 0.015009999999999999 and now saying cost = 0.015.
% Will use this latest setting.

% WARNING #4: Duplicate cost of 'mega_posAnd_notNegOr0/1'.  Had previously said cost = 0.00101 and now saying cost = 0.001.
% Will use this latest setting.

% WARNING #5: Duplicate cost of 'single_example_advice4/1'.  Had previously said cost = 0.01001 and now saying cost = 0.01.
% Will use this latest setting.

% WARNING #6: Duplicate cost of 'not_single_piece_advice5/1'.  Had previously said cost = 0.15001 and now saying cost = 0.15.
% Will use this latest setting.

% Have selected pos example #0 as the next seed: Ell(s)
% [AdviceProcessor] retractRelevanceAdvice: there are 6 assertedRelevanceModes to retract.
% [AdviceProcessor]  Generated 6 clause(s) at relevance level STRONGLY_IRRELEVANT:
% [AdviceProcessor]   mega_posAnd_notNegOr6(A) :- 
% [AdviceProcessor]             Column(B), 
% [AdviceProcessor]             Row(C), 
% [AdviceProcessor]             Length(C, D), 
% [AdviceProcessor]             H(B, E), 
% [AdviceProcessor]             Height(A, F), 
% [AdviceProcessor]             Base(A, D), 
% [AdviceProcessor]             Contains(A, C, B)  POSSIBLE_ANSWER
% [AdviceProcessor]   mega_notPosAnd_negAnd7(A) :- 
% [AdviceProcessor]             \+(Column(B), 
% [AdviceProcessor]                Row(C), 
% [AdviceProcessor]                Length(C, D), 
% [AdviceProcessor]                H(B, E), 
% [AdviceProcessor]                Height(A, F), 
% [AdviceProcessor]                Base(A, D), 
% [AdviceProcessor]                Contains(A, C, B)
% [AdviceProcessor]               )  POSSIBLE_ANSWER
% [AdviceProcessor]   single_example_advice10(A) :- 
% [AdviceProcessor]             Column(B), 
% [AdviceProcessor]             Row(C), 
% [AdviceProcessor]             Length(C, D), 
% [AdviceProcessor]             H(B, E), 
% [AdviceProcessor]             Height(A, F), 
% [AdviceProcessor]             Base(A, D), 
% [AdviceProcessor]             Contains(A, C, B)  VERY_STRONGLY_RELEVANT
% [AdviceProcessor]   not_single_example_advice10(A) :- 
% [AdviceProcessor]             \+(Column(B), 
% [AdviceProcessor]                Row(C), 
% [AdviceProcessor]                Length(C, D), 
% [AdviceProcessor]                H(B, E), 
% [AdviceProcessor]                Height(A, F), 
% [AdviceProcessor]                Base(A, D), 
% [AdviceProcessor]                Contains(A, C, B)
% [AdviceProcessor]               )  VERY_STRONGLY_RELEVANT_NEG
% [AdviceProcessor]   single_piece_advice11(A) :- 
% [AdviceProcessor]             Column(B), 
% [AdviceProcessor]             Row(C), 
% [AdviceProcessor]             Length(C, D), 
% [AdviceProcessor]             H(B, E), 
% [AdviceProcessor]             Height(A, F), 
% [AdviceProcessor]             Base(A, D), 
% [AdviceProcessor]             Contains(A, C, B)  STRONGLY_RELEVANT
% [AdviceProcessor]   not_single_piece_advice11(A) :- 
% [AdviceProcessor]             \+(Column(B), 
% [AdviceProcessor]                Row(C), 
% [AdviceProcessor]                Length(C, D), 
% [AdviceProcessor]                H(B, E), 
% [AdviceProcessor]                Height(A, F), 
% [AdviceProcessor]                Base(A, D), 
% [AdviceProcessor]                Contains(A, C, B)
% [AdviceProcessor]               )  STRONGLY_RELEVANT_NEG

% WARNING #7: Duplicate cost of 'mega_posAnd_notNegOr6/1'.  Had previously said cost = 0.00101 and now saying cost = 0.001.
% Will use this latest setting.

% WARNING #8: Duplicate cost of 'single_piece_advice11/1'.  Had previously said cost = 0.10001 and now saying cost = 0.1.
% Will use this latest setting.

% WARNING #9: Duplicate cost of 'not_single_piece_advice11/1'.  Had previously said cost = 0.15001 and now saying cost = 0.15.
% Will use this latest setting.

% WARNING #10: Duplicate cost of 'mega_notPosAnd_negAnd7/1'.  Had previously said cost = 0.00101 and now saying cost = 0.001.
% Will use this latest setting.

% WARNING #11: Duplicate cost of 'single_example_advice10/1'.  Had previously said cost = 0.01001 and now saying cost = 0.01.
% Will use this latest setting.

% WARNING #12: Duplicate cost of 'not_single_example_advice10/1'.  Had previously said cost = 0.015009999999999999 and now saying cost = 0.015.
% Will use this latest setting.


% LearnOneClause Parameters:
%   Targets (1):
%    Ell(+Shape)
%  Modes (49):
%    Row(+part1),
%    Length(+part1, #Float),
%    Column(+part2),
%    Height(+Shape, #Float),
%    H(+part2, #Float),
%    Contains(+Shape, -part1, -part2),
%    Base(+Shape, #Float),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber),
%    mega_posAnd_notNegOr6(+Shape),
%    single_piece_advice11(+Shape),
%    not_single_piece_advice11(+Shape),
%    mega_notPosAnd_negAnd7(+Shape),
%    single_example_advice10(+Shape),
%    not_single_example_advice10(+Shape)

% target           = Ell(D)
HERE!*************SCORING - MD, CHECK THIS
% Gleaner: New best node found (score = 0.249375): Ell(_).  [covers 1.0/1.0 pos, 3.0/3.0 neg]
% Most-general root: Ell(_).  [covers 1.0/1.0 pos, 3.0/3.0 neg]  score = 0.249

% Consider expanding [#1 of outerLoop #1_fold0, bodyLen=0] 'Ell(_).  [covers 1.0/1.0 pos, 3.0/3.0 neg]' score=0.24937545860349128
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 3 bad extensions.
HERE!*************SCORING - MD, CHECK THIS
% Gleaner: New best node found (score = 0.497502): Ell(A) :- Height(A, 8).  [covers 1.0/1.0 pos, 1.0/3.0 neg]
HERE!*************SCORING - MD, CHECK THIS
HERE!*************SCORING - MD, CHECK THIS
HERE!*************SCORING - MD, CHECK THIS

***** Warning: #1 Gleaner: when handling inliners in: 
   (Ell(A) :- mega_posAnd_notNegOr6(A))
 got multiple clauses:
   [(Ell(A) :- mega_posAnd_notNegOr6(A)), (mega_posAnd_notNegOr6(A) :- Column(B), Row(C), Length(C, D), H(B, _), Height(A, _), Base(A, D), Contains(A, C, B))] *****

% Gleaner: New best node found (score = 0.990099): Ell(A) :- mega_posAnd_notNegOr6(A).  [covers 1.0/1.0 pos, 0.0/3.0 neg]
HERE!*************SCORING - MD, CHECK THIS

***** Warning: #2 Gleaner: when handling inliners in: 
   (Ell(A) :- single_piece_advice11(A))
 got multiple clauses:
   [(Ell(A) :- single_piece_advice11(A)), (single_piece_advice11(A) :- Column(B), Row(C), Length(C, D), H(B, _), Height(A, _), Base(A, D), Contains(A, C, B))] *****

HERE!*************SCORING - MD, CHECK THIS
% [AdviceProcessor] retractRelevanceAdvice: there are 6 assertedRelevanceModes to retract.

% The best node found: Ell(A) :- mega_posAnd_notNegOr6(A).  [covers 1.0/1.0 pos, 0.0/3.0 neg]

% The best node found: Ell(A) :- mega_posAnd_notNegOr6(A).  [covers 1.0/1.0 pos, 0.0/3.0 neg]
There is no fact nor clause nor built-in predicate matching: 'mega_posAnd_notNegOr6/1'.
  Possibly a typo?  If not, add to the BK file:   okIfUnknown: mega_posAnd_notNegOr6/1.

% Skipping over this 'waitHere': There is no fact nor clause nor built-in predicate matching: 'mega_posAnd_notNegOr6/1'.
  Possibly a typo?  If not, add to the BK file:   okIfUnknown: mega_posAnd_notNegOr6/1.

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = Ell(A) :- mega_posAnd_notNegOr6(A).  [covers 1.0/1.0 pos, 0.0/3.0 neg] *****


% On cycle #1, the best clause found is:
%      Ell(A) :- mega_posAnd_notNegOr6(A).  [covers 1.0/1.0 pos, 0.0/3.0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 0.0% of the positive examples and 0.0% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have run out of seed positive examples to try.

% ******************************************

% Finished fold 0 (0.10s):

% Created a total of 7 clauses and expanded 1 of them.
% The collection of best clauses per cycle covers 0 (out of 1) pos and 0 (out of 3) neg examples.

% % 
% % Clauses:

% Ell(A) :- mega_posAnd_notNegOr6(A). // Clause #1.


  initially:  |falseNegatives| = 1 and |trueNegatives| = 3.
     getWeightedCoverage: apply this clause (Ell(A) :- mega_posAnd_notNegOr6(A))
  currently:  |falseNegatives| = 1 and |trueNegatives| = 3.
  initially:  |falseNegatives| = 1 and |trueNegatives| = 3.
     getWeightedCoverage: apply this clause (Ell(A) :- mega_posAnd_notNegOr6(A))
  currently:  |falseNegatives| = 1 and |trueNegatives| = 3.
Theory Ohh MY Gaad!!(Ell(A) :- mega_posAnd_notNegOr6(A))
