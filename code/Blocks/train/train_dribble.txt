% Running on host: BL-SOIC-30ZND42

% Creating string handler #1.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% getInputArgWithDefaultValue: args=[.\Blocks\train/train_pos.txt, .\Blocks\train/train_neg.txt, .\Blocks\train/train_bk.txt, .\Blocks\train/train_facts.txt]
%  for N=0: args[N]=.\Blocks\train/train_pos.txt

% getInputArgWithDefaultValue: args=[.\Blocks\train/train_pos.txt, .\Blocks\train/train_neg.txt, .\Blocks\train/train_bk.txt, .\Blocks\train/train_facts.txt]
%  for N=1: args[N]=.\Blocks\train/train_neg.txt

% getInputArgWithDefaultValue: args=[.\Blocks\train/train_pos.txt, .\Blocks\train/train_neg.txt, .\Blocks\train/train_bk.txt, .\Blocks\train/train_facts.txt]
%  for N=2: args[N]=.\Blocks\train/train_bk.txt

% getInputArgWithDefaultValue: args=[.\Blocks\train/train_pos.txt, .\Blocks\train/train_neg.txt, .\Blocks\train/train_bk.txt, .\Blocks\train/train_facts.txt]
%  for N=3: args[N]=.\Blocks\train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../blocks_bk.txt'.

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% LoadAllModes() called.  Currently loaded modes: []
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
<<<<<<< HEAD
%  Have read 18 facts.
% Have read 2 examples from '.\Blocks\train' [.\Blocks\train/train*].
% Have read 3 examples from '.\Blocks\train' [.\Blocks\train/train*].
=======
%  Have read 9 facts.
% Have read 1 examples from '.\Blocks\train' [.\Blocks\train/train*].
% Have read 4 examples from '.\Blocks\train' [.\Blocks\train/train*].
>>>>>>> 6d9d7a0177d234b31d2ce3516c8ebdc29df8ec2e

%  LearnOneClause initialized.
% Reading background theory from dir: .\Blocks\train
% Have read the relevance files.


% NEW target:                 Ell(D)
%  targetPred:                Ell/1
%  targetArgTypes:            signature = [const], types = [+Shape]
%  targets:                   [Ell(D)]
%  targetPredicates:          [Ell/1]
%  targetArgSpecs:            [[D[+Shape]]]
%  variablesInTargets:        [[D]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
<<<<<<< HEAD
% Time to collect constants: 1 milliseconds
% Time to collect examples: 0 seconds

% Read 2 pos examples and 3 neg examples.
% Time to init learnOneClause: 8 milliseconds
=======
% Time to collect constants: 0 seconds
% Time to collect examples: 0 seconds

% Read 1 pos examples and 4 neg examples.
% Time to init learnOneClause: 0 seconds
% setMinF1toStop = 0.9891089108910891
>>>>>>> 6d9d7a0177d234b31d2ce3516c8ebdc29df8ec2e
%   Add combo #1.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(1)/MinPrec(0.9900)/MaxExpands(10)/MaxCreates(101)/MinPos(0.99)/MaxNegs(-1.00)
%   Add combo #2.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(1)/MinPrec(0.9900)/MaxExpands(10)/MaxCreates(101)/MinPos(0.99)/MaxNegs(-1.00)
%   Add combo #3.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(1)/MinPrec(0.9900)/MaxExpands(10)/MaxCreates(101)/MinPos(0.99)/MaxNegs(-1.00)
%   Add combo #4.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(1)/MinPrec(0.9900)/MaxExpands(10)/MaxCreates(101)/MinPos(0.99)/MaxNegs(-1.00)
%   Add combo #5.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(1)/MinPrec(0.9900)/MaxExpands(10)/MaxCreates(101)/MinPos(0.99)/MaxNegs(-1.00)
%   Add combo #6.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(1)/MinPrec(0.9900)/MaxExpands(10)/MaxCreates(101)/MinPos(0.99)/MaxNegs(-1.00)
%   Add combo #7.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(3)/MinPrec(0.9940)/MaxExpands(10)/MaxCreates(100)/MinPos(0.14)/MaxNegs(-1.00)
%   Add combo #8.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(3)/MinPrec(0.9957)/MaxExpands(10)/MaxCreates(100)/MinPos(0.14)/MaxNegs(-1.00)
%   Add combo #9.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(3)/MinPrec(0.9940)/MaxExpands(10)/MaxCreates(100)/MinPos(0.14)/MaxNegs(-1.00)
%   Add combo #10.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(3)/MinPrec(0.9957)/MaxExpands(10)/MaxCreates(100)/MinPos(0.14)/MaxNegs(-1.00)
%   Add combo #11.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(3)/MinPrec(0.9940)/MaxExpands(10)/MaxCreates(100)/MinPos(0.14)/MaxNegs(-1.00)
%   Add combo #12.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(3)/MinPrec(0.9957)/MaxExpands(10)/MaxCreates(100)/MinPos(0.14)/MaxNegs(-1.00)
%   Add combo #13.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(15)/MinPrec(0.9940)/MaxExpands(10)/MaxCreates(100)/MinPos(0.10)/MaxNegs(-1.00)
%   Add combo #14.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(15)/MinPrec(0.9957)/MaxExpands(10)/MaxCreates(100)/MinPos(0.10)/MaxNegs(-1.00)
%   Add combo #15.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(15)/MinPrec(0.9940)/MaxExpands(10)/MaxCreates(100)/MinPos(0.10)/MaxNegs(-1.00)
%   Add combo #16.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(15)/MinPrec(0.9957)/MaxExpands(10)/MaxCreates(100)/MinPos(0.10)/MaxNegs(-1.00)
%   Add combo #17.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(15)/MinPrec(0.9940)/MaxExpands(10)/MaxCreates(100)/MinPos(0.10)/MaxNegs(-1.00)
%   Add combo #18.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(15)/MinPrec(0.9957)/MaxExpands(10)/MaxCreates(100)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #19.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(10)/MaxCreates(110)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #20.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(10)/MaxCreates(110)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #21.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(10)/MaxCreates(110)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #22.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(10)/MaxCreates(110)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #23.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(10)/MaxCreates(110)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #24.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(10)/MaxCreates(110)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003, oldValue = 0.9940298507462688 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #25.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(10)/MaxCreates(105)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001003, oldValue = 0.9956810631229237 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #26.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(10)/MaxCreates(105)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3003, oldValue = 0.9940298507462688 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #27.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(10)/MaxCreates(105)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003003, oldValue = 0.9956810631229237 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #28.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(10)/MaxCreates(105)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7003, oldValue = 0.9940298507462688 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #29.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(10)/MaxCreates(105)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007003, oldValue = 0.9956810631229237 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #30.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(10)/MaxCreates(105)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1015, oldValue = 0.9940298507462688 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #31.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(10)/MaxCreates(100)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001015, oldValue = 0.9956810631229237 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #32.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(10)/MaxCreates(100)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3015, oldValue = 0.9940298507462688 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #33.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(10)/MaxCreates(100)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003015, oldValue = 0.9956810631229237 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #34.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(10)/MaxCreates(100)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7015, oldValue = 0.9940298507462688 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #35.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(10)/MaxCreates(100)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007015, oldValue = 0.9956810631229237 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #36.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(10)/MaxCreates(100)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #37.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(100)/MaxCreates(1100)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #38.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(100)/MaxCreates(1100)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #39.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(100)/MaxCreates(1100)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #40.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(100)/MaxCreates(1100)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #41.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(100)/MaxCreates(1100)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #42.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(100)/MaxCreates(1100)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003, oldValue = 0.9940298507462688 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #43.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(100)/MaxCreates(1055)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001003, oldValue = 0.9956810631229237 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #44.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(100)/MaxCreates(1055)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3003, oldValue = 0.9940298507462688 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #45.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(100)/MaxCreates(1055)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003003, oldValue = 0.9956810631229237 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #46.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(100)/MaxCreates(1055)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7003, oldValue = 0.9940298507462688 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #47.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(100)/MaxCreates(1055)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007003, oldValue = 0.9956810631229237 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #48.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(100)/MaxCreates(1055)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1015, oldValue = 0.9940298507462688 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #49.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(100)/MaxCreates(1009)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001015, oldValue = 0.9956810631229237 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #50.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(100)/MaxCreates(1009)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3015, oldValue = 0.9940298507462688 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #51.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(100)/MaxCreates(1009)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003015, oldValue = 0.9956810631229237 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #52.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(100)/MaxCreates(1009)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7015, oldValue = 0.9940298507462688 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #53.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(100)/MaxCreates(1009)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007015, oldValue = 0.9956810631229237 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #54.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(100)/MaxCreates(1009)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #55.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(1000)/MaxCreates(11000)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #56.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(1000)/MaxCreates(11000)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #57.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(1000)/MaxCreates(11000)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #58.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(1000)/MaxCreates(11000)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #59.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(1000)/MaxCreates(11000)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007001, oldValue = 0.99 and newValue = 0.9 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #60.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(1)/MinPrec(0.9000)/MaxExpands(1000)/MaxCreates(11000)/MinPos(0.90)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003, oldValue = 0.9940298507462688 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #61.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(1000)/MaxCreates(10550)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001003, oldValue = 0.9956810631229237 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #62.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(1000)/MaxCreates(10550)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3003, oldValue = 0.9940298507462688 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #63.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(1000)/MaxCreates(10550)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003003, oldValue = 0.9956810631229237 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #64.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(1000)/MaxCreates(10550)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7003, oldValue = 0.9940298507462688 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #65.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(1000)/MaxCreates(10550)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007003, oldValue = 0.9956810631229237 and newValue = 0.9450000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #66.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(3)/MinPrec(0.9450)/MaxExpands(1000)/MaxCreates(10550)/MinPos(0.14)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1015, oldValue = 0.9940298507462688 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #67.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(1000)/MaxCreates(10099)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001015, oldValue = 0.9956810631229237 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #68.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(1000)/MaxCreates(10099)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3015, oldValue = 0.9940298507462688 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #69.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(1000)/MaxCreates(10099)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003015, oldValue = 0.9956810631229237 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #70.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(1000)/MaxCreates(10099)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7015, oldValue = 0.9940298507462688 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #71.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(1000)/MaxCreates(10099)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007015, oldValue = 0.9956810631229237 and newValue = 0.9900000000000001 but these should not be different.
% setMinF1toStop = 0.9
%   Add combo #72.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(15)/MinPrec(0.9900)/MaxExpands(1000)/MaxCreates(10099)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #73.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(10)/MaxCreates(125)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #74.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(10)/MaxCreates(125)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #75.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(10)/MaxCreates(125)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #76.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(10)/MaxCreates(125)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #77.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(10)/MaxCreates(125)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #78.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(10)/MaxCreates(125)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003, oldValue = 0.9940298507462688 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #79.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(10)/MaxCreates(121)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001003, oldValue = 0.9956810631229237 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #80.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(10)/MaxCreates(121)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3003, oldValue = 0.9940298507462688 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #81.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(10)/MaxCreates(121)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003003, oldValue = 0.9956810631229237 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #82.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(10)/MaxCreates(121)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7003, oldValue = 0.9940298507462688 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #83.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(10)/MaxCreates(121)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007003, oldValue = 0.9956810631229237 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #84.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(10)/MaxCreates(121)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1015, oldValue = 0.9940298507462688 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #85.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(10)/MaxCreates(117)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001015, oldValue = 0.9956810631229237 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #86.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(10)/MaxCreates(117)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3015, oldValue = 0.9940298507462688 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #87.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(10)/MaxCreates(117)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003015, oldValue = 0.9956810631229237 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #88.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(10)/MaxCreates(117)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7015, oldValue = 0.9940298507462688 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #89.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(10)/MaxCreates(117)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007015, oldValue = 0.9956810631229237 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #90.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(10)/MaxCreates(117)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #91.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(100)/MaxCreates(1250)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #92.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(100)/MaxCreates(1250)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #93.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(100)/MaxCreates(1250)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #94.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(100)/MaxCreates(1250)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #95.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(100)/MaxCreates(1250)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #96.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(100)/MaxCreates(1250)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003, oldValue = 0.9940298507462688 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #97.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(100)/MaxCreates(1212)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001003, oldValue = 0.9956810631229237 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #98.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(100)/MaxCreates(1212)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3003, oldValue = 0.9940298507462688 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #99.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(100)/MaxCreates(1212)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003003, oldValue = 0.9956810631229237 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #100.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(100)/MaxCreates(1212)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7003, oldValue = 0.9940298507462688 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #101.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(100)/MaxCreates(1212)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007003, oldValue = 0.9956810631229237 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #102.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(100)/MaxCreates(1212)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1015, oldValue = 0.9940298507462688 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #103.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(100)/MaxCreates(1174)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001015, oldValue = 0.9956810631229237 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #104.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(100)/MaxCreates(1174)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3015, oldValue = 0.9940298507462688 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #105.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(100)/MaxCreates(1174)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003015, oldValue = 0.9956810631229237 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #106.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(100)/MaxCreates(1174)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7015, oldValue = 0.9940298507462688 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #107.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(100)/MaxCreates(1174)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007015, oldValue = 0.9956810631229237 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #108.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(100)/MaxCreates(1174)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #109.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(1000)/MaxCreates(12500)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #110.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(1000)/MaxCreates(12500)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #111.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(1000)/MaxCreates(12500)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #112.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(1000)/MaxCreates(12500)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #113.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(1000)/MaxCreates(12500)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007001, oldValue = 0.99 and newValue = 0.75 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #114.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(1)/MinPrec(0.7500)/MaxExpands(1000)/MaxCreates(12500)/MinPos(0.75)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003, oldValue = 0.9940298507462688 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #115.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(1000)/MaxCreates(12124)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001003, oldValue = 0.9956810631229237 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #116.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(1000)/MaxCreates(12124)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3003, oldValue = 0.9940298507462688 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #117.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(1000)/MaxCreates(12124)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003003, oldValue = 0.9956810631229237 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #118.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(1000)/MaxCreates(12124)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7003, oldValue = 0.9940298507462688 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #119.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(1000)/MaxCreates(12124)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007003, oldValue = 0.9956810631229237 and newValue = 0.7875000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #120.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(3)/MinPrec(0.7875)/MaxExpands(1000)/MaxCreates(12124)/MinPos(0.11)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1015, oldValue = 0.9940298507462688 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #121.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(1000)/MaxCreates(11749)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001015, oldValue = 0.9956810631229237 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #122.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(1000)/MaxCreates(11749)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3015, oldValue = 0.9940298507462688 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #123.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(1000)/MaxCreates(11749)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003015, oldValue = 0.9956810631229237 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #124.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(1000)/MaxCreates(11749)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7015, oldValue = 0.9940298507462688 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #125.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(1000)/MaxCreates(11749)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007015, oldValue = 0.9956810631229237 and newValue = 0.8250000000000001 but these should not be different.
% setMinF1toStop = 0.75
%   Add combo #126.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(15)/MinPrec(0.8250)/MaxExpands(1000)/MaxCreates(11749)/MinPos(0.08)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001, oldValue = 0.99 and newValue = 0.641434262948207 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #127.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(1)/MinPrec(0.6414)/MaxExpands(10)/MaxCreates(135)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001001, oldValue = 0.99 and newValue = 0.6378486055776893 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #128.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(1)/MinPrec(0.6378)/MaxExpands(10)/MaxCreates(136)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3001, oldValue = 0.99 and newValue = 0.641434262948207 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #129.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(1)/MinPrec(0.6414)/MaxExpands(10)/MaxCreates(135)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003001, oldValue = 0.99 and newValue = 0.6378486055776893 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #130.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(1)/MinPrec(0.6378)/MaxExpands(10)/MaxCreates(136)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7001, oldValue = 0.99 and newValue = 0.641434262948207 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #131.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(1)/MinPrec(0.6414)/MaxExpands(10)/MaxCreates(135)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007001, oldValue = 0.99 and newValue = 0.6378486055776893 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #132.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(1)/MinPrec(0.6378)/MaxExpands(10)/MaxCreates(136)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003, oldValue = 0.9940298507462688 and newValue = 0.6735059760956175 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #133.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(3)/MinPrec(0.6735)/MaxExpands(10)/MaxCreates(132)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001003, oldValue = 0.9956810631229237 and newValue = 0.6697410358565737 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #134.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(3)/MinPrec(0.6697)/MaxExpands(10)/MaxCreates(133)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3003, oldValue = 0.9940298507462688 and newValue = 0.6735059760956175 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #135.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(3)/MinPrec(0.6735)/MaxExpands(10)/MaxCreates(132)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003003, oldValue = 0.9956810631229237 and newValue = 0.6697410358565737 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #136.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(3)/MinPrec(0.6697)/MaxExpands(10)/MaxCreates(133)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7003, oldValue = 0.9940298507462688 and newValue = 0.6735059760956175 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #137.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(3)/MinPrec(0.6735)/MaxExpands(10)/MaxCreates(132)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007003, oldValue = 0.9956810631229237 and newValue = 0.6697410358565737 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #138.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(3)/MinPrec(0.6697)/MaxExpands(10)/MaxCreates(133)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1015, oldValue = 0.9940298507462688 and newValue = 0.7055776892430278 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #139.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(15)/MinPrec(0.7056)/MaxExpands(10)/MaxCreates(129)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001015, oldValue = 0.9956810631229237 and newValue = 0.7016334661354583 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #140.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(15)/MinPrec(0.7016)/MaxExpands(10)/MaxCreates(129)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3015, oldValue = 0.9940298507462688 and newValue = 0.7055776892430278 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #141.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(15)/MinPrec(0.7056)/MaxExpands(10)/MaxCreates(129)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003015, oldValue = 0.9956810631229237 and newValue = 0.7016334661354583 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #142.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(15)/MinPrec(0.7016)/MaxExpands(10)/MaxCreates(129)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7015, oldValue = 0.9940298507462688 and newValue = 0.7055776892430278 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #143.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(15)/MinPrec(0.7056)/MaxExpands(10)/MaxCreates(129)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007015, oldValue = 0.9956810631229237 and newValue = 0.7016334661354583 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #144.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(15)/MinPrec(0.7016)/MaxExpands(10)/MaxCreates(129)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001, oldValue = 0.99 and newValue = 0.641434262948207 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #145.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(1)/MinPrec(0.6414)/MaxExpands(100)/MaxCreates(1358)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001001, oldValue = 0.99 and newValue = 0.6378486055776893 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #146.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(1)/MinPrec(0.6378)/MaxExpands(100)/MaxCreates(1362)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3001, oldValue = 0.99 and newValue = 0.641434262948207 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #147.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(1)/MinPrec(0.6414)/MaxExpands(100)/MaxCreates(1358)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003001, oldValue = 0.99 and newValue = 0.6378486055776893 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #148.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(1)/MinPrec(0.6378)/MaxExpands(100)/MaxCreates(1362)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7001, oldValue = 0.99 and newValue = 0.641434262948207 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #149.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(1)/MinPrec(0.6414)/MaxExpands(100)/MaxCreates(1358)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007001, oldValue = 0.99 and newValue = 0.6378486055776893 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #150.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(1)/MinPrec(0.6378)/MaxExpands(100)/MaxCreates(1362)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003, oldValue = 0.9940298507462688 and newValue = 0.6735059760956175 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #151.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(3)/MinPrec(0.6735)/MaxExpands(100)/MaxCreates(1326)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001003, oldValue = 0.9956810631229237 and newValue = 0.6697410358565737 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #152.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(3)/MinPrec(0.6697)/MaxExpands(100)/MaxCreates(1330)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3003, oldValue = 0.9940298507462688 and newValue = 0.6735059760956175 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #153.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(3)/MinPrec(0.6735)/MaxExpands(100)/MaxCreates(1326)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003003, oldValue = 0.9956810631229237 and newValue = 0.6697410358565737 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #154.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(3)/MinPrec(0.6697)/MaxExpands(100)/MaxCreates(1330)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7003, oldValue = 0.9940298507462688 and newValue = 0.6735059760956175 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #155.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(3)/MinPrec(0.6735)/MaxExpands(100)/MaxCreates(1326)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007003, oldValue = 0.9956810631229237 and newValue = 0.6697410358565737 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #156.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(3)/MinPrec(0.6697)/MaxExpands(100)/MaxCreates(1330)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1015, oldValue = 0.9940298507462688 and newValue = 0.7055776892430278 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #157.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(15)/MinPrec(0.7056)/MaxExpands(100)/MaxCreates(1294)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001015, oldValue = 0.9956810631229237 and newValue = 0.7016334661354583 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #158.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(15)/MinPrec(0.7016)/MaxExpands(100)/MaxCreates(1298)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3015, oldValue = 0.9940298507462688 and newValue = 0.7055776892430278 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #159.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(15)/MinPrec(0.7056)/MaxExpands(100)/MaxCreates(1294)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003015, oldValue = 0.9956810631229237 and newValue = 0.7016334661354583 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #160.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(15)/MinPrec(0.7016)/MaxExpands(100)/MaxCreates(1298)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7015, oldValue = 0.9940298507462688 and newValue = 0.7055776892430278 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #161.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(15)/MinPrec(0.7056)/MaxExpands(100)/MaxCreates(1294)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007015, oldValue = 0.9956810631229237 and newValue = 0.7016334661354583 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #162.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(15)/MinPrec(0.7016)/MaxExpands(100)/MaxCreates(1298)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001, oldValue = 0.99 and newValue = 0.641434262948207 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #163.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(1)/MinPrec(0.6414)/MaxExpands(1000)/MaxCreates(13585)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001001, oldValue = 0.99 and newValue = 0.6378486055776893 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #164.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(1)/MinPrec(0.6378)/MaxExpands(1000)/MaxCreates(13621)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3001, oldValue = 0.99 and newValue = 0.641434262948207 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #165.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(1)/MinPrec(0.6414)/MaxExpands(1000)/MaxCreates(13585)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003001, oldValue = 0.99 and newValue = 0.6378486055776893 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #166.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(1)/MinPrec(0.6378)/MaxExpands(1000)/MaxCreates(13621)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7001, oldValue = 0.99 and newValue = 0.641434262948207 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #167.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(1)/MinPrec(0.6414)/MaxExpands(1000)/MaxCreates(13585)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007001, oldValue = 0.99 and newValue = 0.6378486055776893 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #168.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(1)/MinPrec(0.6378)/MaxExpands(1000)/MaxCreates(13621)/MinPos(0.64)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003, oldValue = 0.9940298507462688 and newValue = 0.6735059760956175 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #169.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(3)/MinPrec(0.6735)/MaxExpands(1000)/MaxCreates(13264)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001003, oldValue = 0.9956810631229237 and newValue = 0.6697410358565737 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #170.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(3)/MinPrec(0.6697)/MaxExpands(1000)/MaxCreates(13302)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3003, oldValue = 0.9940298507462688 and newValue = 0.6735059760956175 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #171.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(3)/MinPrec(0.6735)/MaxExpands(1000)/MaxCreates(13264)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003003, oldValue = 0.9956810631229237 and newValue = 0.6697410358565737 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #172.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(3)/MinPrec(0.6697)/MaxExpands(1000)/MaxCreates(13302)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7003, oldValue = 0.9940298507462688 and newValue = 0.6735059760956175 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #173.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(3)/MinPrec(0.6735)/MaxExpands(1000)/MaxCreates(13264)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007003, oldValue = 0.9956810631229237 and newValue = 0.6697410358565737 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #174.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(3)/MinPrec(0.6697)/MaxExpands(1000)/MaxCreates(13302)/MinPos(0.10)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1015, oldValue = 0.9940298507462688 and newValue = 0.7055776892430278 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #175.
%     MinRelevance(null)/MaxLen(1)/MaxClauses(15)/MinPrec(0.7056)/MaxExpands(1000)/MaxCreates(12944)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1001015, oldValue = 0.9956810631229237 and newValue = 0.7016334661354583 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #176.
%     MinRelevance(null)/Flipped(true)/MaxLen(1)/MaxClauses(15)/MinPrec(0.7016)/MaxExpands(1000)/MaxCreates(12983)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 3015, oldValue = 0.9940298507462688 and newValue = 0.7055776892430278 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #177.
%     MinRelevance(null)/MaxLen(3)/MaxClauses(15)/MinPrec(0.7056)/MaxExpands(1000)/MaxCreates(12944)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1003015, oldValue = 0.9956810631229237 and newValue = 0.7016334661354583 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #178.
%     MinRelevance(null)/Flipped(true)/MaxLen(3)/MaxClauses(15)/MinPrec(0.7016)/MaxExpands(1000)/MaxCreates(12983)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 7015, oldValue = 0.9940298507462688 and newValue = 0.7055776892430278 but these should not be different.
% setMinF1toStop = 0.641434262948207
%   Add combo #179.
%     MinRelevance(null)/MaxLen(7)/MaxClauses(15)/MinPrec(0.7056)/MaxExpands(1000)/MaxCreates(12944)/MinPos(0.07)/MaxNegs(-1.00)
%  setPreviousMinPrecision: for key = 1007015, oldValue = 0.9956810631229237 and newValue = 0.7016334661354583 but these should not be different.
% setMinF1toStop = 0.6378486055776893
%   Add combo #180.
%     MinRelevance(null)/Flipped(true)/MaxLen(7)/MaxClauses(15)/MinPrec(0.7016)/MaxExpands(1000)/MaxCreates(12983)/MinPos(0.07)/MaxNegs(-1.00)

% Have 180 Onion combinations to try.
LAYERS ################## 180

%----------------------------
<<<<<<< HEAD
% CONSIDERING Settings #1 (1 of 180).
% (The ONION has been running for a total of 77.00ms
=======
% CONSIDERING Settings #1 (1 of 171).
% (The ONION has been running for a total of 64.00ms
>>>>>>> 6d9d7a0177d234b31d2ce3516c8ebdc29df8ec2e
%  and has 12.00h left;
%  36.00m have been allotted for this setting)
%  The differences from the default settings are:
%   maxNumberOfCycles  = 2
%   maxNumberOfClauses = 1
%   maxBodyLength      = 1
%   maxNodesToCreate   = 101
%   maxNodesToConsider = 10
%   minPosCoverage     = 0.9900
%   maxNegCoverage     = -1.0000
%   minPrecision       = 0.9900
%   mEstimatePos       = 0.0100
%   mEstimateNeg       = 0.0100
%   map mode '*' to '-'
%   modes in use: [Row/1, Length/2, Column/1, Height/2, Contains/2, SpRel/3, Base/2, Ell/1, addList/2, multiplyList/2, abs/2, minus/2, plus/3, minus/3, mult/3, div/3, allNumbers/1, positiveNumber/1, negativeNumber/1, in0toDot001/1, in0toDot01/1, in0toDot1/1, in0to1/1, in0to10/1, in0to100/1, in0to1000/1, equalWithTolerance/3, greaterOrEqualDifference/3, smallerOrEqualDifference/3, isaEqualTolerance/1, lessThan/2, greaterThan/2, lessThanOrEqual/2, greaterThanOrEqual/2, inBetweenOO/3, inBetweenCO/3, inBetweenOC/3, inBetweenCC/3, memberOfList/2, firstInList/2, restOfList/2, positionInList/3, nthInList/3, lengthOfList/2]
%   all modes:    [Row/1, Length/2, Column/1, Height/2, Contains/2, SpRel/3, Base/2, Ell/1, addList/2, multiplyList/2, abs/2, minus/2, plus/3, minus/3, mult/3, div/3, allNumbers/1, positiveNumber/1, negativeNumber/1, in0toDot001/1, in0toDot01/1, in0toDot1/1, in0to1/1, in0to10/1, in0to100/1, in0to1000/1, equalWithTolerance/3, greaterOrEqualDifference/3, smallerOrEqualDifference/3, isaEqualTolerance/1, lessThan/2, greaterThan/2, lessThanOrEqual/2, greaterThanOrEqual/2, inBetweenOO/3, inBetweenCO/3, inBetweenOC/3, inBetweenCC/3, memberOfList/2, firstInList/2, restOfList/2, positionInList/3, nthInList/3, lengthOfList/2]
% ILPparameterSettings.helpRun: annotationForSetting = ONION Layer #1, minPrec=0.99, maxC=1, maxL=1

% Initializing fold 0.
%   Number of positive TRAIN examples = 2.
%   Number of negative TRAIN examples = 3.
%   Number of positive EVAL  examples = 0.
%   Number of negative EVAL  examples = 0.
% [AdviceProcessor]  Generated 0 clauses at relevance level RELEVANT.
% Have selected pos example #0 as the next seed: Ell(s)
% [AdviceProcessor]  Generated 0 clauses at relevance level RELEVANT.

% LearnOneClause Parameters:
%   Targets (1):
%    Ell(+Shape)
%  Modes (43):
%    Row(+Shape),
%    Length(+Shape, +Value),
%    Column(+Shape),
<<<<<<< HEAD
%    Height(+Shape, #Value),
=======
%    Height(+Shape, +Value),
>>>>>>> 6d9d7a0177d234b31d2ce3516c8ebdc29df8ec2e
%    Contains(+Shape, -Shape),
%    SpRel(#Rel, +Shape, +Shape),
%    Base(+Shape, +Value),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber)

% target           = Ell(D)
<<<<<<< HEAD
HERE!*************SCORING - MD, CHECK THIS
% Most-general root: Ell(_).  [covers 2.0/2.0 pos, 3.0/3.0 neg]  score = 0.399

% Consider expanding [#1 of outerLoop #1_fold0, bodyLen=0] 'Ell(_).  [covers 2.0/2.0 pos, 3.0/3.0 neg]' score=0.39920049680638725
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 1 bad extensions.
HERE!*************SCORING - MD, CHECK THIS
HERE!*************SCORING - MD, CHECK THIS
HERE!*************SCORING - MD, CHECK THIS
HERE!*************SCORING - MD, CHECK THIS
HERE!*************SCORING - MD, CHECK THIS
HERE!*************SCORING - MD, CHECK THIS
% Gleaner: New best node found (score = 0.995014): Ell(A) :- Contains(A, _).  [covers 2.0/2.0 pos, 0.0/3.0 neg]
HERE!*************SCORING - MD, CHECK THIS
HERE!*************SCORING - MD, CHECK THIS
HERE!*************SCORING - MD, CHECK THIS

% The best node found: Ell(A) :- Contains(A, _).  [covers 2.0/2.0 pos, 0.0/3.0 neg]

% The best node found: Ell(A) :- Contains(A, _).  [covers 2.0/2.0 pos, 0.0/3.0 neg]

% On cycle #1, the best clause found is:
%      Ell(A) :- Contains(A, _).  [covers 2.0/2.0 pos, 0.0/3.0 neg]
% This clause covers 2 positive examples, of which 2 are newly covered.
=======
% Most-general root: Ell(_).  [covers 1.0/1.0 pos, 4.0/4.0 neg]  score = 0.200

% Consider expanding [#1 of outerLoop #1_fold0, bodyLen=0] 'Ell(_).  [covers 1.0/1.0 pos, 4.0/4.0 neg]' score=0.1995996984031936
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 4 bad extensions.
% Gleaner: New best node found (score = 0.990088): Ell(A) :- Contains(A, _).  [covers 1.0/1.0 pos, 0.0/4.0 neg]

% The best node found: Ell(A) :- Contains(A, _).  [covers 1.0/1.0 pos, 0.0/4.0 neg]

% The best node found: Ell(A) :- Contains(A, _).  [covers 1.0/1.0 pos, 0.0/4.0 neg]

% On cycle #1, the best clause found is:
%      Ell(A) :- Contains(A, _).  [covers 1.0/1.0 pos, 0.0/4.0 neg]
% This clause covers 1 positive examples, of which 1 are newly covered.
>>>>>>> 6d9d7a0177d234b31d2ce3516c8ebdc29df8ec2e
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 100.0% of the positive examples and 0.0% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have exceeded the minimal fraction (0.9) of positive examples to cover.

% ******************************************

<<<<<<< HEAD
% Finished fold 0 (0.04s):

% Created a total of 1 clauses and expanded 1 of them.
% The collection of best clauses per cycle covers 2 (out of 2) pos and 0 (out of 3) neg examples.
=======
% Finished fold 0 (0.02s):

% Created a total of 2 clauses and expanded 1 of them.
% The collection of best clauses per cycle covers 1 (out of 1) pos and 0 (out of 4) neg examples.
>>>>>>> 6d9d7a0177d234b31d2ce3516c8ebdc29df8ec2e

% % 
% % Clauses:

% Ell(A) :- Contains(A, B). // Clause #1.


<<<<<<< HEAD
  initially:  |falseNegatives| = 2 and |trueNegatives| = 3.
     getWeightedCoverage: apply this clause (Ell(A) :- Contains(A, _))
  currently:  |falseNegatives| = 0 and |trueNegatives| = 3.
  initially:  |falseNegatives| = 2 and |trueNegatives| = 3.
     getWeightedCoverage: apply this clause (Ell(A) :- Contains(A, _))
  currently:  |falseNegatives| = 0 and |trueNegatives| = 3.
=======
  initially:  |falseNegatives| = 1 and |trueNegatives| = 4.
     getWeightedCoverage: apply this clause (Ell(A) :- Contains(A, _))
  currently:  |falseNegatives| = 0 and |trueNegatives| = 4.
  initially:  |falseNegatives| = 1 and |trueNegatives| = 4.
     getWeightedCoverage: apply this clause (Ell(A) :- Contains(A, _))
  currently:  |falseNegatives| = 0 and |trueNegatives| = 4.
>>>>>>> 6d9d7a0177d234b31d2ce3516c8ebdc29df8ec2e

% Trainset results for
%  The differences from the default settings are:
%   maxNumberOfCycles  = 2
%   maxNumberOfClauses = 1
%   maxBodyLength      = 1
%   maxNodesToCreate   = 101
%   maxNodesToConsider = 10
%   minPosCoverage     = 0.9900
%   maxNegCoverage     = -1.0000
%   minPrecision       = 0.9900
%   mEstimatePos       = 0.0100
%   mEstimateNeg       = 0.0100
%   map mode '*' to '-'
%   modes in use: [Row/1, Length/2, Column/1, Height/2, Contains/2, SpRel/3, Base/2, Ell/1, addList/2, multiplyList/2, abs/2, minus/2, plus/3, minus/3, mult/3, div/3, allNumbers/1, positiveNumber/1, negativeNumber/1, in0toDot001/1, in0toDot01/1, in0toDot1/1, in0to1/1, in0to10/1, in0to100/1, in0to1000/1, equalWithTolerance/3, greaterOrEqualDifference/3, smallerOrEqualDifference/3, isaEqualTolerance/1, lessThan/2, greaterThan/2, lessThanOrEqual/2, greaterThanOrEqual/2, inBetweenOO/3, inBetweenCO/3, inBetweenOC/3, inBetweenCC/3, memberOfList/2, firstInList/2, restOfList/2, positionInList/3, nthInList/3, lengthOfList/2]
%   all modes:    [Row/1, Length/2, Column/1, Height/2, Contains/2, SpRel/3, Base/2, Ell/1, addList/2, multiplyList/2, abs/2, minus/2, plus/3, minus/3, mult/3, div/3, allNumbers/1, positiveNumber/1, negativeNumber/1, in0toDot001/1, in0toDot01/1, in0toDot1/1, in0to1/1, in0to10/1, in0to100/1, in0to1000/1, equalWithTolerance/3, greaterOrEqualDifference/3, smallerOrEqualDifference/3, isaEqualTolerance/1, lessThan/2, greaterThan/2, lessThanOrEqual/2, greaterThanOrEqual/2, inBetweenOO/3, inBetweenCO/3, inBetweenOC/3, inBetweenCC/3, memberOfList/2, firstInList/2, restOfList/2, positionInList/3, nthInList/3, lengthOfList/2]

 
% Clauses:

Ell(A) :- Contains(A, B). // Clause #1.


 % Folds = 1, Train: % [TP=2, FP=0, TN=3, FN=0, A=1.00, P=1.00, R=1.00, F1=1.00]
% precision = 0.995 vs trainset min = 0.990
% recall    = 0.995 vs trainset min = 0.990
% accuracy  = 0.996 vs trainset min = 0.990
% F1        = 0.995 vs trainset min = 0.990

% Can stop because the theory's (weighted) trainset F1 (1.00) reached the minimum specified (0.99).

% ------------------------------------------------


% Best Theory Chosen by the Onion:
    
%     Clauses:

    Ell(A) :- Contains(A, B). // Clause #1.



%              Actual
%             Pos   Neg Total
% Model Pos     2     0     2
%       Neg     0     3     3
%     Total     2     3

% False Pos mEst  = 0.0100
% False Neg mEst  = 0.0100

% Accuracy  = 0.9960
% Precision = 0.9950
% Recall    = 0.9950
% F(1)      = 0.9950


% Chosen Parameter Settings:
%   maxNumberOfCycles  = 2
%   maxNumberOfClauses = 1
%   maxBodyLength      = 1
%   maxNodesToCreate   = 101
%   maxNodesToConsider = 10
%   minNumberOfNegExamples = 1
%   minPosCoverage     = 0.9900
%   maxNegCoverage     = -1.0000
%   minPrecision       = 0.9900
%   mEstimatePos       = 0.0100
%   mEstimateNeg       = 0.0100
%   minimum strength   = null
%   map mode '*' to '-'
%   modes in use: [Row/1, Length/2, Column/1, Height/2, Contains/2, SpRel/3, Base/2, Ell/1, addList/2, multiplyList/2, abs/2, minus/2, plus/3, minus/3, mult/3, div/3, allNumbers/1, positiveNumber/1, negativeNumber/1, in0toDot001/1, in0toDot01/1, in0toDot1/1, in0to1/1, in0to10/1, in0to100/1, in0to1000/1, equalWithTolerance/3, greaterOrEqualDifference/3, smallerOrEqualDifference/3, isaEqualTolerance/1, lessThan/2, greaterThan/2, lessThanOrEqual/2, greaterThanOrEqual/2, inBetweenOO/3, inBetweenCO/3, inBetweenOC/3, inBetweenCC/3, memberOfList/2, firstInList/2, restOfList/2, positionInList/3, nthInList/3, lengthOfList/2]
%   all modes:    [Row/1, Length/2, Column/1, Height/2, Contains/2, SpRel/3, Base/2, Ell/1, addList/2, multiplyList/2, abs/2, minus/2, plus/3, minus/3, mult/3, div/3, allNumbers/1, positiveNumber/1, negativeNumber/1, in0toDot001/1, in0toDot01/1, in0toDot1/1, in0to1/1, in0to10/1, in0to100/1, in0to1000/1, equalWithTolerance/3, greaterOrEqualDifference/3, smallerOrEqualDifference/3, isaEqualTolerance/1, lessThan/2, greaterThan/2, lessThanOrEqual/2, greaterThanOrEqual/2, inBetweenOO/3, inBetweenCO/3, inBetweenOC/3, inBetweenCC/3, memberOfList/2, firstInList/2, restOfList/2, positionInList/3, nthInList/3, lengthOfList/2]

% ------------------------------------------------

<<<<<<< HEAD
% Took 141 milliseconds.
% Executed 100 proofs in 0.02 seconds (6330.36 proofs/sec).
% Performed 113 unifications while proving Horn clauses.
=======
% Took 79 milliseconds.
% Executed 31 proofs in 0.00 seconds (14962.83 proofs/sec).
% Performed 14 unifications while proving Horn clauses.
>>>>>>> 6d9d7a0177d234b31d2ce3516c8ebdc29df8ec2e
