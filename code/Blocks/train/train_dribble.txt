% Running on host: DESKTOP-A7D8Q9H

% Creating string handler #1.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% getInputArgWithDefaultValue: args=[C:\Users\Nandini\Dropbox\Blocks\train/train_pos.txt, C:\Users\Nandini\Dropbox\Blocks\train/train_neg.txt, C:\Users\Nandini\Dropbox\Blocks\train/train_bk.txt, C:\Users\Nandini\Dropbox\Blocks\train/train_facts.txt]
%  for N=0: args[N]=C:\Users\Nandini\Dropbox\Blocks\train/train_pos.txt

% getInputArgWithDefaultValue: args=[C:\Users\Nandini\Dropbox\Blocks\train/train_pos.txt, C:\Users\Nandini\Dropbox\Blocks\train/train_neg.txt, C:\Users\Nandini\Dropbox\Blocks\train/train_bk.txt, C:\Users\Nandini\Dropbox\Blocks\train/train_facts.txt]
%  for N=1: args[N]=C:\Users\Nandini\Dropbox\Blocks\train/train_neg.txt

% getInputArgWithDefaultValue: args=[C:\Users\Nandini\Dropbox\Blocks\train/train_pos.txt, C:\Users\Nandini\Dropbox\Blocks\train/train_neg.txt, C:\Users\Nandini\Dropbox\Blocks\train/train_bk.txt, C:\Users\Nandini\Dropbox\Blocks\train/train_facts.txt]
%  for N=2: args[N]=C:\Users\Nandini\Dropbox\Blocks\train/train_bk.txt

% getInputArgWithDefaultValue: args=[C:\Users\Nandini\Dropbox\Blocks\train/train_pos.txt, C:\Users\Nandini\Dropbox\Blocks\train/train_neg.txt, C:\Users\Nandini\Dropbox\Blocks\train/train_bk.txt, C:\Users\Nandini\Dropbox\Blocks\train/train_facts.txt]
%  for N=3: args[N]=C:\Users\Nandini\Dropbox\Blocks\train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../blocks_bk.txt'.

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% LoadAllModes() called.  Currently loaded modes: []
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_listsInLogic, modes_differentInLogic, comparisonInLogic, bootstrapBKinLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, inlines_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 12 facts.
% Have read 1 examples from 'C:\Users\Nandini\Dropbox\Blocks\train' [C:\Users\Nandini\Dropbox\Blocks\train/train*].
% Have read 0 examples from 'C:\Users\Nandini\Dropbox\Blocks\train' [C:\Users\Nandini\Dropbox\Blocks\train/train*].

%  LearnOneClause initialized.

***** Warning: % Should not set minPosCoverage (2.0) to more than the total weight on the positive examples (1.0).  Will use the maximum possible value. *****

% Reading background theory from dir: C:\Users\Nandini\Dropbox\Blocks\train
% Have read the relevance files.


% NEW target:                 Ell(D)
%  targetPred:                Ell/1
%  targetArgTypes:            signature = [const], types = [+Shape]
%  targets:                   [Ell(D)]
%  targetPredicates:          [Ell/1]
%  targetArgSpecs:            [[D[+Shape]]]
%  variablesInTargets:        [[D]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 0 seconds
% Time to collect examples: 0 seconds

% Read 1 pos examples and 0 neg examples.
% Time to init learnOneClause: 0 seconds

% Initializing fold 0.
%   Number of positive TRAIN examples = 1.
%   Number of negative TRAIN examples = 0.
%   Number of positive EVAL  examples = 0.
%   Number of negative EVAL  examples = 0.
% [AdviceProcessor]  Generated 6 clause(s) at relevance level STRONGLY_IRRELEVANT:
% [AdviceProcessor]   mega_posAnd_notNegOr0(A) :- 
% [AdviceProcessor]             Column(B), 
% [AdviceProcessor]             Row(C), 
% [AdviceProcessor]             Length(C, D), 
% [AdviceProcessor]             Height(A, E), 
% [AdviceProcessor]             Base(A, D), 
% [AdviceProcessor]             Contains(A, C, B)  POSSIBLE_ANSWER
% [AdviceProcessor]   mega_notPosAnd_negAnd1(A) :- 
% [AdviceProcessor]             \+(Column(B), 
% [AdviceProcessor]                Row(C), 
% [AdviceProcessor]                Length(C, D), 
% [AdviceProcessor]                Height(A, E), 
% [AdviceProcessor]                Base(A, D), 
% [AdviceProcessor]                Contains(A, C, B)
% [AdviceProcessor]               )  POSSIBLE_ANSWER
% [AdviceProcessor]   single_example_advice4(A) :- 
% [AdviceProcessor]             Column(B), 
% [AdviceProcessor]             Row(C), 
% [AdviceProcessor]             Length(C, D), 
% [AdviceProcessor]             Height(A, E), 
% [AdviceProcessor]             Base(A, D), 
% [AdviceProcessor]             Contains(A, C, B)  VERY_STRONGLY_RELEVANT
% [AdviceProcessor]   not_single_example_advice4(A) :- 
% [AdviceProcessor]             \+(Column(B), 
% [AdviceProcessor]                Row(C), 
% [AdviceProcessor]                Length(C, D), 
% [AdviceProcessor]                Height(A, E), 
% [AdviceProcessor]                Base(A, D), 
% [AdviceProcessor]                Contains(A, C, B)
% [AdviceProcessor]               )  VERY_STRONGLY_RELEVANT_NEG
% [AdviceProcessor]   single_piece_advice5(A) :- 
% [AdviceProcessor]             Column(B), 
% [AdviceProcessor]             Row(C), 
% [AdviceProcessor]             Length(C, D), 
% [AdviceProcessor]             Height(A, E), 
% [AdviceProcessor]             Base(A, D), 
% [AdviceProcessor]             Contains(A, C, B)  STRONGLY_RELEVANT
% [AdviceProcessor]   not_single_piece_advice5(A) :- 
% [AdviceProcessor]             \+(Column(B), 
% [AdviceProcessor]                Row(C), 
% [AdviceProcessor]                Length(C, D), 
% [AdviceProcessor]                Height(A, E), 
% [AdviceProcessor]                Base(A, D), 
% [AdviceProcessor]                Contains(A, C, B)
% [AdviceProcessor]               )  STRONGLY_RELEVANT_NEG

% WARNING #1: Duplicate cost of 'single_piece_advice5/1'.  Had previously said cost = 0.10001 and now saying cost = 0.1.
% Will use this latest setting.

% WARNING #2: Duplicate cost of 'mega_notPosAnd_negAnd1/1'.  Had previously said cost = 0.00101 and now saying cost = 0.001.
% Will use this latest setting.

% WARNING #3: Duplicate cost of 'not_single_example_advice4/1'.  Had previously said cost = 0.015009999999999999 and now saying cost = 0.015.
% Will use this latest setting.

% WARNING #4: Duplicate cost of 'mega_posAnd_notNegOr0/1'.  Had previously said cost = 0.00101 and now saying cost = 0.001.
% Will use this latest setting.

% WARNING #5: Duplicate cost of 'single_example_advice4/1'.  Had previously said cost = 0.01001 and now saying cost = 0.01.
% Will use this latest setting.

% WARNING #6: Duplicate cost of 'not_single_piece_advice5/1'.  Had previously said cost = 0.15001 and now saying cost = 0.15.
% Will use this latest setting.

% Have selected pos example #0 as the next seed: Ell(s)
% [AdviceProcessor] retractRelevanceAdvice: there are 6 assertedRelevanceModes to retract.
% [AdviceProcessor]  Generated 6 clause(s) at relevance level STRONGLY_IRRELEVANT:
% [AdviceProcessor]   mega_posAnd_notNegOr6(A) :- 
% [AdviceProcessor]             Column(B), 
% [AdviceProcessor]             Row(C), 
% [AdviceProcessor]             Length(C, D), 
% [AdviceProcessor]             Height(A, E), 
% [AdviceProcessor]             Base(A, D), 
% [AdviceProcessor]             Contains(A, C, B)  POSSIBLE_ANSWER
% [AdviceProcessor]   mega_notPosAnd_negAnd7(A) :- 
% [AdviceProcessor]             \+(Column(B), 
% [AdviceProcessor]                Row(C), 
% [AdviceProcessor]                Length(C, D), 
% [AdviceProcessor]                Height(A, E), 
% [AdviceProcessor]                Base(A, D), 
% [AdviceProcessor]                Contains(A, C, B)
% [AdviceProcessor]               )  POSSIBLE_ANSWER
% [AdviceProcessor]   single_example_advice10(A) :- 
% [AdviceProcessor]             Column(B), 
% [AdviceProcessor]             Row(C), 
% [AdviceProcessor]             Length(C, D), 
% [AdviceProcessor]             Height(A, E), 
% [AdviceProcessor]             Base(A, D), 
% [AdviceProcessor]             Contains(A, C, B)  VERY_STRONGLY_RELEVANT
% [AdviceProcessor]   not_single_example_advice10(A) :- 
% [AdviceProcessor]             \+(Column(B), 
% [AdviceProcessor]                Row(C), 
% [AdviceProcessor]                Length(C, D), 
% [AdviceProcessor]                Height(A, E), 
% [AdviceProcessor]                Base(A, D), 
% [AdviceProcessor]                Contains(A, C, B)
% [AdviceProcessor]               )  VERY_STRONGLY_RELEVANT_NEG
% [AdviceProcessor]   single_piece_advice11(A) :- 
% [AdviceProcessor]             Column(B), 
% [AdviceProcessor]             Row(C), 
% [AdviceProcessor]             Length(C, D), 
% [AdviceProcessor]             Height(A, E), 
% [AdviceProcessor]             Base(A, D), 
% [AdviceProcessor]             Contains(A, C, B)  STRONGLY_RELEVANT
% [AdviceProcessor]   not_single_piece_advice11(A) :- 
% [AdviceProcessor]             \+(Column(B), 
% [AdviceProcessor]                Row(C), 
% [AdviceProcessor]                Length(C, D), 
% [AdviceProcessor]                Height(A, E), 
% [AdviceProcessor]                Base(A, D), 
% [AdviceProcessor]                Contains(A, C, B)
% [AdviceProcessor]               )  STRONGLY_RELEVANT_NEG

% WARNING #7: Duplicate cost of 'mega_posAnd_notNegOr6/1'.  Had previously said cost = 0.00101 and now saying cost = 0.001.
% Will use this latest setting.

% WARNING #8: Duplicate cost of 'single_piece_advice11/1'.  Had previously said cost = 0.10001 and now saying cost = 0.1.
% Will use this latest setting.

% WARNING #9: Duplicate cost of 'not_single_piece_advice11/1'.  Had previously said cost = 0.15001 and now saying cost = 0.15.
% Will use this latest setting.

% WARNING #10: Duplicate cost of 'mega_notPosAnd_negAnd7/1'.  Had previously said cost = 0.00101 and now saying cost = 0.001.
% Will use this latest setting.

% WARNING #11: Duplicate cost of 'single_example_advice10/1'.  Had previously said cost = 0.01001 and now saying cost = 0.01.
% Will use this latest setting.

% WARNING #12: Duplicate cost of 'not_single_example_advice10/1'.  Had previously said cost = 0.015009999999999999 and now saying cost = 0.015.
% Will use this latest setting.


% LearnOneClause Parameters:
%   Targets (1):
%    Ell(+Shape)
%  Modes (48):
%    Row(+part1),
%    Length(+part1, #Float),
%    Column(+part2),
%    Height(+Shape, #Float),
%    Contains(+Shape, -part1, -part2),
%    Base(+Shape, #Float),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber),
%    mega_posAnd_notNegOr6(+Shape),
%    single_piece_advice11(+Shape),
%    not_single_piece_advice11(+Shape),
%    mega_notPosAnd_negAnd7(+Shape),
%    single_example_advice10(+Shape),
%    not_single_example_advice10(+Shape)

% target           = Ell(D)
% Gleaner: New best node found (score = 0.990098): Ell(_).  [covers 1.0/1.0 pos, 0.0/0.0 neg]
% Most-general root: Ell(_).  [covers 1.0/1.0 pos, 0.0/0.0 neg]  score = 0.990

% Skipping over this 'waitHere': This search will never start for 'LearnOneClause': continueTheSearch = false, |open| = 1
% [AdviceProcessor] retractRelevanceAdvice: there are 6 assertedRelevanceModes to retract.

% The best node found: Ell(_).  [covers 1.0/1.0 pos, 0.0/0.0 neg]

% The best node found: Ell(_).  [covers 1.0/1.0 pos, 0.0/0.0 neg]

% On cycle #1, the best clause found is:
%      Ell(_).  [covers 1.0/1.0 pos, 0.0/0.0 neg]
% This clause covers 1 positive examples, of which 1 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 100.0% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have exceeded the minimal fraction (0.9) of positive examples to cover.

% ******************************************

% Finished fold 0 (0.05s):

% Created a total of 1 clauses and expanded 0 of them.
% The collection of best clauses per cycle covers 1 (out of 1) pos and 0 (out of 0) neg examples.

% % 
% % Clauses:

% Ell(A) :- true. // Clause #1.


  initially:  |falseNegatives| = 1 and |trueNegatives| = 0.
     getWeightedCoverage: apply this clause (Ell(_) :- true)
  currently:  |falseNegatives| = 0 and |trueNegatives| = 0.
  initially:  |falseNegatives| = 1 and |trueNegatives| = 0.
     getWeightedCoverage: apply this clause (Ell(_) :- true)
  currently:  |falseNegatives| = 0 and |trueNegatives| = 0.

% Took 63 milliseconds.
% Executed 3 proofs in 0.00 seconds (3119.46 proofs/sec).
% Performed 0 unifications while proving Horn clauses.
