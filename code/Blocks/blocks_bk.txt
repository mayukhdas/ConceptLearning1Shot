setParam: nodeSize=100.


mode: Row(+Part).
mode: Length(+Part,#Float1).
mode: H(+Part,#Float2).
mode: Column(+Part).
mode: Contains(+Shape,-Part).
mode: Base(+Shape,#Float4).
mode: Height(+Shape,#Float3).
mode: SpRel(&Rel,#Float5,+Part,+Part).
mode: Ell(+Shape).
mode: sameAsNew(#Float1,#Float4).
mode: equalWithToleranceNew(#Float3,#Float2,#Float6).

okIfUnknown: equalWithToleranceNew/3
okIfUnknown: sameAsNew/2

//usePrologVariables: true.
//precompute:
//sameAsNew(X, Y) :- Length(P, X), Base(P, Y), !.
precompute: sameAsNew(Float1, Float4) :- Length(Part, Float1), Base(Shape, Float4), equalWithSmallTolerance(Float1, Float4).

//precompute: equalWithTolerance(X,Y,Z) :-  Height(P, X), H(P, Y), var(Z), !, Z is X - Y.
precompute: equalWithToleranceNew(Float3, Float2, Float6) :-  Height(Shape, Float3), H(Part, Float2), Float6 is Float3 - Float2 .


bridger: Contains/2.
bridger: SpRel/4.
